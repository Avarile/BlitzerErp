{"version":3,"file":"static/js/450.726dad3f.chunk.js","mappings":"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","sources":["data/api.controller.ts","data/api.service.ts","utils/ENVCONFIG.ts","utils/commomComponents/Notification.tsx","utils/interfaces.ts","utils/utilFuncs.ts"],"sourcesContent":["// Universal Api controller\n//\nimport axios from \"axios\";\nimport Storage from \"@SRC/data/session.controller\";\nimport { setIsloading, setError } from \"@DATA/dataSlices/isloading.slice\";\nimport Notification from \"@SRC/utils/commomComponents/Notification\";\nimport { store } from \"./dataStore/store.redux\";\n\n// about the @SRC\n// first in webpack.config.js\n// find resolve/alias add \"@SRC\": path.resolve(\"src\"),\n\nconst { NODE_ENV } = process.env; // retrive env values from process.env\n//\n\nclass Request {\n  axiosInstance: any;\n\n  constructor() {\n    // initilize a singleton axios instance to perform all the api actions\n    this.axiosInstance = axios.create({\n      timeout: 10000,\n      baseURL: \"\",\n      headers: {\n        \"Content-Type\": \"application/json;charset=utf-8\",\n        \"X-Requested-Width\": \"XMLHttpRequest\",\n      },\n    });\n    this.interceptRequest(); // intercept all request and response\n    this.interceptResponse();\n  }\n\n  private setIsloading(status: boolean): void {\n    store.dispatch(setIsloading(status));\n  }\n\n  private setError(error: any): void {\n    store.dispatch(setError(error));\n  }\n\n  private interceptRequest() {\n    this.axiosInstance.interceptors.request.use((config: any) => {\n      config.headers[\"token\"] = Storage.getCachedDate(\"token\") || \"\"; // token is either the access token or just empty string\n      if (config.url.includes(\"/upload\")) {\n        config.headers[\"Content-Type\"] = \"multipart/form-data\";\n      }\n      return config;\n    });\n  }\n\n  private interceptResponse() {\n    this.axiosInstance.interceptors.response.use((response: any) => {\n      if (response?.data) {\n        const { code = \"200\" } = response.data; // NOTE: not all backend is restful\n        if (code === \"200\" || response.statusText.toLocalLowerCase() === \"ok\") {\n          return Promise.resolve(response);\n        } else {\n          return Promise.reject(response);\n        }\n      } else {\n        // shall I return a error component here????\n        return Promise.reject(\"no data\");\n      }\n    }),\n      (error: any) => {\n        if (error.response) {\n          const { status = \"\" } = error.response; // set the dafault values of status to \"\", incase there is a error.response.status = undefined\n          if (error.response.status === 401) {\n            // window.history.push(LOGIN) // if token is not valid or avaliable or login failed, jump to login page\n          }\n          return Promise.reject(error);\n        } else {\n          // todo: shall I call a component to show the warning or message?\n          return Promise.reject(\"request timeout, please refresh to try again\");\n        }\n      };\n  }\n\n  /**\n   * get data\n   * @param url\n   * @param params\n   * @returns {Promise}\n   */\n  public get(url: string, params = {}) {\n    return new Promise((resolve, reject) => {\n      this.setIsloading(true);\n      this.axiosInstance\n        .get(url, {\n          params: params,\n        })\n        .then((response: any) => {\n          resolve(response.data);\n        })\n        .catch((error: any) => {\n          this.setError(error);\n          Notification({ type: \"warning\", message: \"Unable to acquire data, please check internet connection\", messageTarget: \"\" });\n          reject(error);\n        })\n        .finally(this.setIsloading(false));\n    });\n  }\n\n  /**\n   * post data\n   * @param url\n   * @param params\n   * @returns {Promise}\n   */\n  public post(url: string, params = {}, config: { [key: string]: any } = {}, notification: string) {\n    return new Promise((resolve, reject) => {\n      this.setIsloading(true);\n      if (typeof params === \"object\") {\n        if (params.constructor.name === \"FormData\") {\n          config[\"Content-Type\"] = \"multipart/form-data\";\n        }\n      }\n      this.axiosInstance\n        .post(url, params, config)\n        .then((response: any) => {\n          resolve(response.data);\n          Notification({ type: \"success\", messageTarget: `${notification} is successfully created` });\n        })\n        .catch((error: any) => {\n          this.setError(error);\n          Notification({ type: \"warning\", messageTarget: `${notification} creation failed, please try again later!` });\n          reject(error);\n        })\n        .finally(this.setIsloading(false));\n    });\n  }\n\n  /**\n   * patch\n   * @param url\n   * @param params\n   * @returns {Promise}\n   */\n  public patch(url: string, params: {}, notification: string) {\n    return new Promise((resolve, reject) => {\n      this.setIsloading(true);\n      this.axiosInstance\n        .patch(url, params)\n        .then((response: any) => {\n          resolve(response.data);\n          \n          Notification({ type: \"success\", messageTarget: `${notification} successfully updated` });\n        })\n        .catch((error: any) => {\n          this.setError(error);\n          Notification({ type: \"warning\", messageTarget: `${notification} update failed, please try again later` });\n          reject(error);\n        })\n        .finally(this.setIsloading(false));\n    });\n  }\n\n  /**\n   * put\n   * @param url\n   * @param params\n   * @returns {Promise}\n   */\n  public put(url: string, params: {}, notification: string) {\n    return new Promise((resolve, reject) => {\n      this.setIsloading(true);\n      this.axiosInstance\n        .put(url, params)\n        .then((response: any) => {\n          resolve(response.data);\n          Notification({ type: \"success\", messageTarget: `${notification} is succefully updated` });\n        })\n        .catch((error: any) => {\n          Notification({ type: \"warning\", messageTarget: `${notification} update failed, please try again later` });\n          reject(error);\n        })\n        .finally(this.setIsloading(false));\n    });\n  }\n}\n\nexport default new Request(); // export the singleton\n","import Request from \"@DATA/api.controller\"\nimport envSwitch from \"@SRC/utils/ENVCONFIG\"\nimport { refineQueryString, deduplicateArray, timeStamp } from \"@SRC/utils/utilFuncs\"\nimport qs from \"query-string\"\nimport { store } from \"./dataStore/store.redux\"\nimport { setSelectedItems, setPrice, setOrderCustomer, setOrderShippingInfo } from \"@DATA/dataSlices/order.slice\"\nimport { IUser, IProduct, ILogisticSearchParams, ELogisticStatus, IlogisticInfo, IOrderProduct, IOrderStatusCombined } from \"src/utils/interfaces\"\nimport Notification from \"@SRC/utils/commomComponents/Notification\"\nimport { FormInstance } from \"antd\"\n// import debounce from \"lodash/debounce\";\n\nconst dispatch = store.dispatch\n\nconst debounce = (callback: Function, timer = 1000): Function => {\n  let delay: any\n  return function (this: any, ...args: any) {\n    if (delay) {\n      clearTimeout(delay)\n    }\n    delay = setTimeout(() => {\n      callback(...args)\n    }, timer)\n  }\n}\n\nconst env = envSwitch(\"dep\")\n\nexport const generateOrder = async (payload: object) => {\n  await Request.post(`${env.dbUri}/orders`, payload, {}, \"order\")\n}\n\nexport const getOrderByParams = (searchParams: Partial<IOrderStatusCombined>, setData: Function, setLoadingStatus: Function, formInstance?: FormInstance) => {\n  // debugger;\n  // init the search, loading starts\n  setLoadingStatus(true)\n\n  const tempFunc = async () => {\n    await Request.get(`${env.dbUri}/orders?${qs.stringify(refineQueryString(searchParams))}`)\n      .then((response: any) => {\n        setData(response)\n      })\n      .finally(() => {\n        setLoadingStatus(false)\n      })\n  }\n  tempFunc()\n}\n\nexport const getOrdersById = async (searchParams: { orderId: string }) => {\n  return await Request.get(`${env.dbUri}/orders?${qs.stringify(refineQueryString(searchParams))}`)\n}\n\n/**\n * beware that this func is specifically designed for Json-server, if the backend is deployed, this should change.\n */\nexport const updateOrderForPayment = async (\n  orderId: number,\n  paymentDetail: { method: \"cash\" | \"debitCard\" | \"creditCard\" | \"paypal\" | \"3rdParty\"; amount: number; referenceCodes: string; description: string }\n) => {\n  Request.put(`${env.dbUri}/orders/${orderId}`, paymentDetail, \"Payment\")\n}\n\n/**\n * beware that this func is specifically designed for Json-server, if the backend is deployed, this should change.\n */\nexport const updateOrderForFabrication = async (\n  orderId: number,\n  fabricationStatus: \"pending\" | \"machineProcessing\" | \"machineProcessFinished\" | \"powderCoating\" | \"powderCoatingFinished\" | \"waitingForInstallation\" | \"installing\" | \"ready\"\n) => {\n  Request.put(`${env.dbUri}/orders/${orderId}`, fabricationStatus, \"Fabrication Status\")\n}\n\nexport const updateOrderForLogistic = async (orderId: number, logisticStatus: ELogisticStatus) => {\n  Request.put(`${env.dbUri}/orders/${orderId}`, logisticStatus, \"Logistic Status\")\n}\n\nexport const updateOrderForLogisticInfo = async (orderId: number, logisticInfo: IlogisticInfo) => {\n  Request.put(`${env.dbUri}/orders/${orderId}`, logisticInfo, \"LogisticInfo\")\n}\n\nexport const getProductBySku = async (searchParams: { sku: string }, setProducts: Function) => {\n  await Request.get(`${env.dbUri}/products?${qs.stringify(refineQueryString(searchParams))}`).then((response: any) => {\n    setProducts(response)\n  })\n}\n\nexport const getClientsByParams = (\n  params: { email: string } | { mobile: number },\n  loadingStatus: any,\n  setLoadingStatus: any,\n  formInstance: any,\n  setUiController: any,\n  uiController: { userInfo: any; userCreateOrEditSwitch: any; shippingInfo: any }\n) => {\n  setLoadingStatus({\n    ...loadingStatus,\n    userInfo: true,\n  })\n  const tempFunc = async () => {\n    await Request.get(`${env.dbUri}/clients?${qs.stringify(refineQueryString(params))}`)\n      .then((response: any) => {\n        if (response.length > 0) {\n          setUiController({\n            ...uiController,\n            userCreateOrEditSwitch: true,\n          })\n\n          const { name, id, email, mobile, vip, address, postcode } = response[0]\n          formInstance.setFieldsValue({\n            client: {\n              name: name,\n              email: email,\n              mobile: mobile,\n              vip: vip,\n              address: address,\n              postcode: postcode,\n              id: id,\n            },\n          })\n        } else {\n          formInstance.setFieldsValue({\n            client: {\n              name: null,\n              email: null,\n              mobile: null,\n              vip: null,\n              address: null,\n              postcode: null,\n              id: null,\n            },\n          })\n        }\n      })\n      .finally(() => {\n        // setUiController({\n        //   ...uiController,\n        //   userCreateOrEditSwitch: false,\n        // })\n        setLoadingStatus({\n          ...loadingStatus,\n          userInfo: false,\n        })\n      })\n  }\n\n  // const debouncedTempFunc = debounce(tempFunc, 3000);\n  tempFunc()\n}\n\n/**\n * Update exiting user Info or Create new user\n *\n */\nexport const manipulateUserInfo = async (payload: IUser, funcSwitch: \"create\" | \"update\") => {\n  let tempPayload\n  if (funcSwitch === \"update\") {\n    tempPayload = { ...payload, updatedAt: timeStamp() }\n    await Request.put(`${env.dbUri}/clients/${tempPayload.id}}`, payload, `User Info${payload.name}`)\n  }\n  if (funcSwitch === \"create\") {\n    tempPayload = { ...payload, createdAt: timeStamp() }\n    await Request.post(`${env.dbUri}/clients`, payload, {}, `user: ${payload.name}`)\n  } else return Notification({ type: \"error\", message: \"User Component Error\" })\n}\n\nexport const searchProductBySku = async (\n  sku: string,\n  setLoadingStatus: any,\n  loadingStatus: {\n    userInfo: boolean\n    shippingInfo: boolean\n    productSearch: boolean\n  },\n  formInstance: any,\n  columnIndex: number\n) => {\n  setLoadingStatus({\n    ...loadingStatus,\n    productSearch: true,\n  })\n  // console.log(sku)\n\n  await Request.get(`${env.dbUri}/products?sku=${sku}`)\n\n    .then((response: any) => {\n      // debugger;\n      let currentFormValue = formInstance.getFieldValue(\"products\") // accquire entire list of items\n      if (response.length > 0) {\n        // console.log(response[0])\n\n        const { name, id, size, price, powdercoatingPrice, installationPrice, currentInStock } = response[0] // accquire the response item\n        const currentColumn = {\n          id: id,\n          name: name,\n          size: size,\n          price: price,\n          pcPrice: powdercoatingPrice,\n          installPrice: installationPrice,\n          currentInStock: currentInStock,\n        }\n        const changedFormValue = currentFormValue.map((item: any, index: number) => {\n          if (index === columnIndex) {\n            item.name = currentColumn.name\n            item.id = currentColumn.id\n            item.size = currentColumn.size\n            item.price = currentColumn.price\n            item.pcPrice = currentColumn.pcPrice\n            item.installPrice = currentColumn.installPrice\n            item.currentInStock = currentColumn.currentInStock\n            return item\n          } else return item\n        })\n\n        formInstance.setFieldsValue({ products: changedFormValue })\n      } else {\n        return null\n      }\n    })\n    .finally(() => {\n      setTimeout(() => {\n        setLoadingStatus({\n          ...loadingStatus,\n          productSearch: false,\n        })\n      }, 1000)\n    })\n}\n\n/**\n * to be called in the Addpayment component\n * @param product\n */\nexport const deductProduct = async (product: IOrderProduct) => {\n  const payload = {\n    ...product,\n    currentInStock: product.currentInStock - 1,\n  }\n\n  await Request.put(`${env.dbUri}/products/${product.id}`, payload, `${product.name}`)\n}\n\nexport const AddToWatchingList = async (orderNumber: number, checked: boolean) => {\n  await Request.patch(`${env.dbUri}/orders/${orderNumber}`, { checked: !checked }, `OrderNumber: ${orderNumber}`)\n}\n\n// only works for Jons server: the sytax currentInStock_gte=1&currentInStock_lte=5 only works for json server\nexport const getShortageItems = async (setData: Function) => {\n  const searchParams = `${env.dbUri}/products?currentInStock_gte=1&currentInStock_lte=5`\n  await Request.get(searchParams).then((response: any) => {\n    setData(response)\n  })\n}\n\nexport const getProductData = async (queryData: { name?: string; sku?: string } = {}) => {\n  return await Request.get(`${env.dbUri}/products?${qs.stringify(refineQueryString(queryData))}`)\n}\n\nexport const putProductData = async (url: string, payload: object) => {\n  return await Request.put(`${env.dbUri}/products/${url}`, payload, \"Product\")\n}\n\nexport const createNewProduct = (payload: object) => {\n  return Request.post(`${env.dbUri}/products`, payload, {}, \"Product\")\n}\n\nexport const getProductDataDeposits = async (queryData: { name?: string; sku?: string } = {}) => {\n  return await Request.get(`${env.dbUri}/products?${qs.stringify(refineQueryString(queryData))}`)\n}\n","const ENVCONFIG = {\n  development: {\n    dbUri: \"http://localhost:3001\",\n  },\n  deployment: {\n    dbUri: \"http://137.147.94.100:2096\",\n  },\n};\n\ninterface IEnvConfig {\n  development: Object;\n  deployment: Object;\n}\nconst envSwitch = (switchSelector: \"dev\" | \"dep\") => {\n  if (switchSelector === \"dev\") {\n    return ENVCONFIG.development;\n  }\n  if (switchSelector === \"dep\") {\n    return ENVCONFIG.deployment;\n  } else {\n    throw new Error(\"Wrong Env selection\");\n  }\n};\n\nexport default envSwitch;\n","import React from \"react\"\nimport \"antd/dist/antd.css\"\nimport { message } from \"antd\"\n\nexport interface IConfig {\n  type: \"success\" | \"error\" | \"warning\"\n  message?: string\n  messageTarget?: string\n}\n/**\n * notificationControll messageTarget is a token to represent what subject is about this message.\n * @param config: {variant: string, message: string, type: notificationType  } || undefined\n * @returns {Notification}\n */\nconst Notification = (config: IConfig) => {\n  let paylaodMessage\n  if (config.message) {\n    paylaodMessage = config.message\n  } else {\n    paylaodMessage = config.messageTarget\n  }\n  return message[config.type](paylaodMessage)\n}\n\nexport default Notification\n","export interface IProduct {\n  id: number;\n  name: string;\n  type: \"canopy\" | \"tray\" | \"toolbox\" | \"accessories\" | \"4x4\" | \"servicebody\" | \"tubcanopy\";\n  subtype: \"no subtype\" | \"dogbox\" | \"drawbar\" | \"gullwing\";\n  detail: \"detailType1\" | \"detailType2\" | \"detailType3\";\n  sku: string;\n  length: number;\n  size: string;\n  currentInStock: number;\n  price: number;\n  powdercoatingPrice: number;\n  installationPrice: number;\n  desc: string;\n  spec: string;\n  updateLog: string;\n}\n\nexport interface IOrderProduct {\n  id: number;\n  sku: string;\n  name: string;\n  size: string;\n  price: number;\n  pcPrice: number;\n  installPrice: number;\n  currentInStock: number;\n}\n\nexport interface IUser {\n  id: number;\n  name: string;\n  email: string;\n  mobile: string;\n  vip: boolean;\n  address: string;\n  postcode: number;\n}\n\nexport interface IOrderDetail {\n  clientId: number;\n  clientName: string;\n  clientEmail: string;\n  clientVip: string;\n  clientAddress: string;\n  clientPostcode: number;\n  checked: boolean;\n  shippingAddress: string;\n  shippingPostcode: number;\n  shippingShippingFee: number;\n  priceItemPrice: number;\n  pricepcPrice: number;\n  priceinstallPrice: number;\n  pricetotalAmount: number;\n  pricedepositPayed: number;\n  createdAt: Date;\n  createdBy: string;\n  updatedAt: Date;\n  updatedBy: string;\n  orderStatus: string;\n  fabricationStatus: EfabricationStatus;\n  logisticStatus: ELogisticStatus;\n  logisticProvider: ELogisticProvider | null;\n  pickupAt: Date | null;\n  orderPayed: number;\n  paymentDetail: Array<any>;\n  balanceDue: number;\n  id: number;\n}\n\nexport enum EfabricationStatus {\n  pending = \"pending\",\n  machineProcessing = \"machineProcessing\",\n  machineProcessFinished = \"machineProcessFinished\",\n  powderCoating = \"powderCoating\",\n  powderCoatingFinished = \"powderCoatingFinished\",\n  waitingForInstallation = \"waitingForInstallation\",\n  installing = \"installing\",\n  ready = \"ready\",\n}\n\nexport interface IFabrication {\n  fabricationStatus: EfabricationStatus;\n}\n\nexport enum ELogisticStatus {\n  waitingForCarrier = \"waitingForCarrier\",\n  pickupAlready = \"pickupAlready\",\n  delivering = \"delivering\",\n  delivered = \"delivered\",\n  cannotDeliver = \"cannotDeliver\",\n  returningToVender = \"returningToVender\",\n  returnedItemArrived = \"returnedItemArrived\",\n  itemDamagedInTransport = \"itemDamagedInTransport\",\n}\n\nexport enum ELogisticProvider {\n  AustralianPost = \"Australian Post\",\n  BigPost = \"Big Post\",\n  FastWay = \"FastWay\",\n}\n\nexport interface ILogisticSearchParams {\n  logisticStatus: ELogisticStatus | undefined;\n  logisticProvider: ELogisticProvider | undefined;\n  pickupAt: \"\" | undefined;\n  id: number | undefined;\n}\n\nexport interface IOrderStatusCombined extends ILogisticSearchParams, IFabrication {\n  checked: boolean;\n}\n\nexport interface IlogisticInfo {\n  logisticProvider: string;\n  trackingNumber: string;\n  pickupAt: Date;\n  logisticSideNote: string;\n}\n\nexport enum EPaymentStatus {\n  pending = \"pending\",\n  partiallyPayed = \"partiallyPayed\",\n  fullyPayed = \"fullyPayed\",\n}\n\nexport interface IOrderSearchParams {\n  logisticStatus: ELogisticStatus;\n  fabricationStatus: EfabricationStatus;\n  orderStatus: EPaymentStatus;\n  id: number;\n  dateRange: string;\n}\n\nexport interface IClient {\n  id: string;\n  name: string;\n  email: string;\n  mobile: number;\n  vip: boolean;\n  address: string;\n  postcode: number;\n}\n","import dayjs from \"dayjs\";\nimport { EfabricationStatus, IFabrication, ELogisticStatus, IOrderProduct } from \"./interfaces\";\nimport { fabricationStatus } from \"./productTypes\";\nimport { deductProduct } from \"@SRC/data/api.service\";\n\nexport type QueryStringType = {\n  [Key: string | number]: any;\n};\n\nexport const refineQueryString = (queryString: QueryStringType) => {\n  const response = { ...queryString }; //spread and pass the values to response\n\n  // equals to const result = Object.assign({}, object)\n  Object.keys(response).forEach((key: any) => {\n    const value: any = response[key]; // ?????? todo need help\n    // when value === null/undefined/false  but there is a problem that when value is 0, it will still return false,  so we need to deal with this, cuz 0 is still a valid value, and a valid value should not return false.\n    if (isVoid(value)) {\n      delete response[key]; // if there is no value, delete the key\n    }\n  });\n  return response;\n};\n\nexport const isVoid = (value: undefined | null | \"\") => {\n  if (value === undefined || value === null || value === \"\") {\n    return true;\n  } else return false;\n};\n\nexport const stockIndicator = (stockNumber: number): \"success\" | \"warning\" | \"error\" | \"processing\" | \"default\" => {\n  if (stockNumber >= 10) {\n    return \"processing\";\n  }\n  if (stockNumber >= 5) {\n    // if 10 > stockNumber > 5\n    return \"success\";\n  }\n  if (stockNumber >= 3) {\n    // if 5 > stockNumber > 1\n    return \"warning\";\n  }\n  if (stockNumber < 3) {\n    return \"error\";\n  } else {\n    return \"default\";\n  }\n};\n\n// interface IOrderStatus {\n//   orderStatus: \"pending\" | \"partiallyPayed\" | \"fullyPayed\" | \"machineProcessing\" | \"machineProcessFinished\" | \"powderCoating\" | \"powderCoatingFinished\" | \"ready\";\n// }\n\nexport const orderStatusIndicator = (\n  orderStatus: \"pending\" | \"partiallyPayed\" | \"fullyPayed\" | \"machineProcessing\" | \"machineProcessFinished\" | \"powderCoating\" | \"powderCoatingFinished\" | \"installing\" | \"ready\"\n) => {\n  switch (orderStatus) {\n    case \"pending\":\n      return \"error\";\n      break;\n    case \"partiallyPayed\":\n    case \"machineProcessing\":\n    case \"machineProcessFinished\":\n    case \"powderCoating\":\n    case \"powderCoatingFinished\":\n    case \"installing\":\n      return \"default\";\n      break;\n    case \"fullyPayed\":\n    case \"ready\":\n      return \"success\";\n      break;\n  }\n};\n\nexport const fabricationStatusIndicator = (fabricationStatus: EfabricationStatus) => {\n  switch (fabricationStatus) {\n    case \"pending\":\n      return \"error\";\n      break;\n    case \"machineProcessing\":\n    case \"machineProcessFinished\":\n    case \"powderCoating\":\n    case \"powderCoatingFinished\":\n    case \"waitingForInstallation\":\n    case \"installing\":\n      return \"processing\";\n      break;\n    case \"ready\":\n      return \"success\";\n      break;\n  }\n};\n\nconst teseDemo = (fabricationStatus: EfabricationStatus) => {\n  let status = EfabricationStatus.pending;\n};\n\nexport const logisticStatusIndicator = (logisticStatus: ELogisticStatus) => {\n  switch (logisticStatus) {\n    case \"waitingForCarrier\":\n      return \"error\";\n      break;\n    case \"pickupAlready\":\n      return \"processing\";\n      break;\n    case \"delivering\":\n      return \"processing\";\n      break;\n    case \"delivered\":\n      return \"success\";\n      break;\n    case \"cannotDeliver\":\n      return \"warning\";\n      break;\n    case \"returningToVender\":\n      return \"warning\";\n      break;\n    case \"returnedItemArrived\":\n      return \"success\";\n      break;\n    case \"itemDamagedInTransport\":\n      return \"error\";\n      break;\n  }\n};\n\nexport const CaculateTypeItems = (typeName: string | \"\" | null | undefined, products: any[]): number => {\n  let count = 0;\n  for (const item of products) {\n    if (item.type === typeName) {\n      count++;\n    } else count = count;\n  }\n\n  return count;\n};\n\nexport const debounce = (callback: Function, timer = 1000): Function => {\n  let delay: any;\n  return function (this: any, ...args: any) {\n    if (delay) {\n      clearTimeout(delay);\n    }\n    delay = setTimeout(() => {\n      callback.apply(args);\n    }, timer);\n  };\n};\n// howto:\n//   const debouncedApiCall = debounce(() => {\n//   getClients(queryParams).then((response: any) => {\n//     currentOrderRef.current.client = response\n//   })\n// })\n// debouncedApiCall(2000)\n\n/**\n * deduplicate\n * @param array\n * @returns array\n */\nexport const deduplicateArray = (array: [any]) => {\n  return Array.from(new Set(array));\n};\n\nexport const timeStamp = () => {\n  return dayjs().format(\"YYYY-MM-DD\");\n};\n\nexport const determineItemShouldbeDeduct = (orderFullyPayed: boolean, order: any) => {\n  if (orderFullyPayed) {\n    order.product.map((item: Omit<IOrderProduct, \"id\">) => {});\n  }\n};\n\n/**\n * determine if there is a shortage for each item in the products list and make apicall\n * @param products\n */\nexport const isShortage = (products: IOrderProduct[]): { sku: string }[] => {\n  let result: { sku: string }[] = [];\n  for (let item of products) {\n    if (item.currentInStock >= 1) {\n      //todo: means this order can be put through\n      result = [];\n    } else {\n      result.push({\n        sku: item.sku,\n      });\n    }\n  }\n  return result;\n};\n\nexport const deductFromCurrentStock = (product: IOrderProduct) => {\n  deductProduct(product);\n};\n"],"names":["Request","axiosInstance","this","axios","timeout","baseURL","headers","interceptRequest","interceptResponse","status","store","setIsloading","error","setError","interceptors","request","use","config","Storage","url","includes","response","data","code","statusText","toLocalLowerCase","Promise","resolve","reject","params","get","then","catch","Notification","type","message","messageTarget","finally","notification","constructor","name","post","patch","put","env","envSwitch","generateOrder","payload","dbUri","getOrderByParams","searchParams","setData","setLoadingStatus","formInstance","tempFunc","qs","refineQueryString","getOrdersById","updateOrderForPayment","orderId","paymentDetail","updateOrderForFabrication","fabricationStatus","updateOrderForLogistic","logisticStatus","updateOrderForLogisticInfo","logisticInfo","getProductBySku","setProducts","getClientsByParams","loadingStatus","setUiController","uiController","userInfo","length","userCreateOrEditSwitch","id","email","mobile","vip","address","postcode","setFieldsValue","client","manipulateUserInfo","funcSwitch","tempPayload","updatedAt","timeStamp","createdAt","searchProductBySku","sku","columnIndex","productSearch","currentFormValue","getFieldValue","currentColumn","size","price","pcPrice","powdercoatingPrice","installPrice","installationPrice","currentInStock","changedFormValue","map","item","index","products","setTimeout","deductProduct","product","AddToWatchingList","orderNumber","checked","getShortageItems","getProductData","queryData","putProductData","createNewProduct","getProductDataDeposits","ENVCONFIG","switchSelector","Error","paylaodMessage","EfabricationStatus","ELogisticStatus","ELogisticProvider","EPaymentStatus","queryString","Object","keys","forEach","key","value","isVoid","undefined","stockIndicator","stockNumber","orderStatusIndicator","orderStatus","fabricationStatusIndicator","logisticStatusIndicator","CaculateTypeItems","typeName","count","dayjs","format","isShortage","result","push","deductFromCurrentStock"],"sourceRoot":""}